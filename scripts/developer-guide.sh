#!/bin/bash
# Developer Testing Guide and Quick Start
# This script provides comprehensive testing and development instructions

set -e

echo "üöÄ Offline Medical Assistant - Developer Testing Guide"
echo "====================================================="
echo ""

SCRIPT_DIR="$(dirname "$0")"
ROOT_DIR="$SCRIPT_DIR/.."

cd "$ROOT_DIR"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_header() {
    echo ""
    echo -e "${BLUE}$1${NC}"
    echo "$(printf '=%.0s' {1..50})"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_header "Project Overview"
echo "This is a React + Tauri desktop application that provides offline medical assistance."
echo "The app uses embedded Ollama AI for privacy-focused medical consultations."
echo ""
echo "Tech Stack:"
echo "  ‚Ä¢ Frontend: React + TypeScript + Vite + Tailwind CSS v4"
echo "  ‚Ä¢ Backend: Rust + Tauri v2"
echo "  ‚Ä¢ AI: Embedded Ollama with medical models"
echo "  ‚Ä¢ Database: SQLite via SQLx"

print_header "Quick Start - Development"
echo "1. Install dependencies:"
echo "   npm install"
echo ""
echo "2. Start development server:"
echo "   npm run tauri dev"
echo "   (This starts both frontend Vite server and Tauri backend)"
echo ""
echo "3. The app should open automatically with:"
echo "   ‚Ä¢ Frontend at http://localhost:1420"
echo "   ‚Ä¢ Tauri desktop application window"

print_header "Available Testing Scripts"
echo "Run these from the project root directory:"
echo ""
echo -e "${GREEN}Quick Health Check${NC} (30 seconds)"
echo "  npm test"
echo "  OR: bash scripts/health-check.sh"
echo "  ‚Ä¢ Verifies project structure and basic dependencies"
echo ""
echo -e "${GREEN}Frontend Tests${NC} (1-2 minutes)"
echo "  npm run test:frontend"
echo "  OR: bash scripts/test-frontend.sh"
echo "  ‚Ä¢ TypeScript compilation"
echo "  ‚Ä¢ Build verification"
echo "  ‚Ä¢ Bundle size analysis"
echo ""
echo -e "${GREEN}Backend Tests${NC} (1-2 minutes)"
echo "  npm run test:backend"
echo "  OR: bash scripts/test-backend.sh"
echo "  ‚Ä¢ Rust compilation and linting"
echo "  ‚Ä¢ Cargo build verification"
echo "  ‚Ä¢ Unit tests"
echo ""
echo -e "${GREEN}Development Server${NC} (manual testing)"
echo "  npm run test:dev"
echo "  OR: bash scripts/test-dev.sh"
echo "  ‚Ä¢ Starts full application for manual testing"
echo "  ‚Ä¢ Tests UI, navigation, and AI integration"
echo ""
echo -e "${GREEN}API Testing${NC} (manual with running app)"
echo "  npm run test:api"
echo "  OR: bash scripts/test-api.sh"
echo "  ‚Ä¢ Starts app for API endpoint testing"
echo "  ‚Ä¢ Provides manual testing checklist"
echo ""
echo -e "${YELLOW}Full Build Test${NC} (5-10 minutes, 2GB+ required)"
echo "  npm run test:build"
echo "  OR: bash scripts/test-build.sh"
echo "  ‚Ä¢ Complete Tauri application build"
echo "  ‚Ä¢ Creates platform-specific bundles"
echo "  ‚Ä¢ Large build artifacts created"
echo ""
echo -e "${BLUE}Complete Test Suite${NC} (Interactive)"
echo "  npm run test:all"
echo "  OR: bash scripts/test-all.sh"
echo "  ‚Ä¢ Runs all tests in sequence"
echo "  ‚Ä¢ Asks before running full build"

print_header "Manual Testing Checklist"
echo "When running 'npm run tauri dev', test these features:"
echo ""
echo "üè† HomePage:"
echo "  ‚Ä¢ Welcome message and navigation"
echo "  ‚Ä¢ System status indicators"
echo "  ‚Ä¢ Quick action buttons"
echo ""
echo "üí¨ ChatPage:"
echo "  ‚Ä¢ Submit medical queries"
echo "  ‚Ä¢ View AI responses"
echo "  ‚Ä¢ Emergency detection"
echo "  ‚Ä¢ Response formatting"
echo ""
echo "üìä HistoryPage:"
echo "  ‚Ä¢ View past conversations"
echo "  ‚Ä¢ Search functionality"
echo "  ‚Ä¢ Export conversations"
echo ""
echo "‚öôÔ∏è  SettingsPage:"
echo "  ‚Ä¢ AI service start/stop"
echo "  ‚Ä¢ Model selection"
echo "  ‚Ä¢ System health check"
echo "  ‚Ä¢ Connection testing"

print_header "Troubleshooting Common Issues"
echo ""
echo "üîß Node/NPM Issues:"
echo "  ‚Ä¢ Ensure Node.js 18+ is installed"
echo "  ‚Ä¢ Run 'npm install' to install/update dependencies"
echo "  ‚Ä¢ Clear cache: 'npm cache clean --force'"
echo ""
echo "ü¶Ä Rust/Cargo Issues:"
echo "  ‚Ä¢ Ensure Rust 1.70+ is installed"
echo "  ‚Ä¢ Update toolchain: 'rustup update'"
echo "  ‚Ä¢ Clean build: 'cd src-tauri && cargo clean'"
echo ""
echo "üé® Tailwind CSS Issues:"
echo "  ‚Ä¢ Using Tailwind CSS v4 (latest)"
echo "  ‚Ä¢ Check tailwind.config.js for custom colors"
echo "  ‚Ä¢ Verify @tailwindcss/postcss is installed"
echo ""
echo "ü§ñ AI/Ollama Issues:"
echo "  ‚Ä¢ AI service may not start automatically"
echo "  ‚Ä¢ Use Settings page to manually start AI"
echo "  ‚Ä¢ Check if Ollama is available on system"
echo "  ‚Ä¢ Embedded Ollama requires proper bundling"

print_header "Development Workflow"
echo ""
echo "üë®‚Äçüíª Day-to-day Development:"
echo "  1. Start with health check: 'npm test'"
echo "  2. Make your changes"
echo "  3. Test frontend: 'npm run test:frontend'"
echo "  4. Test backend: 'npm run test:backend' (if Rust changes)"
echo "  5. Manual test: 'npm run test:dev'"
echo ""
echo "üöÄ Before Commits:"
echo "  1. Run all tests: 'npm run test:all'"
echo "  2. Verify no build errors"
echo "  3. Test key functionality manually"
echo ""
echo "üì¶ Release Preparation:"
echo "  1. Full test suite: 'npm run test:all'"
echo "  2. Full build test: 'npm run test:build'"
echo "  3. Test on target platforms"

print_header "File Structure Guide"
echo ""
echo "üìÅ Frontend (src/):"
echo "  ‚Ä¢ components/: React UI components"
echo "  ‚Ä¢ services/: API communication (api-tauri.ts)"
echo "  ‚Ä¢ context/: React context providers"
echo ""
echo "üìÅ Backend (src-tauri/):"
echo "  ‚Ä¢ src/lib.rs: Main Tauri commands"
echo "  ‚Ä¢ src/medical_ai.rs: AI processing logic"
echo "  ‚Ä¢ src/ollama_manager.rs: Ollama integration"
echo ""
echo "üìÅ Scripts (scripts/):"
echo "  ‚Ä¢ All testing and development scripts"
echo "  ‚Ä¢ health-check.sh: Quick verification"
echo "  ‚Ä¢ test-*.sh: Specific test suites"

print_header "Next Steps"
echo ""
echo "üîÑ To get started immediately:"
echo "  1. Run: npm test"
echo "  2. If all checks pass, run: npm run tauri dev"
echo "  3. Test the application manually"
echo ""
echo "üìö For detailed documentation:"
echo "  ‚Ä¢ README.md: Project overview"
echo "  ‚Ä¢ OLLAMA_SETUP.md: AI integration guide"
echo "  ‚Ä¢ src-tauri/: Backend documentation"
echo ""
echo "üêõ Found issues?"
echo "  ‚Ä¢ Check scripts output for specific errors"
echo "  ‚Ä¢ Review troubleshooting section above"
echo "  ‚Ä¢ Check GitHub issues for known problems"

print_header "Script Completed"
print_success "Developer guide displayed successfully!"
echo ""
echo "Run 'bash scripts/developer-guide.sh' anytime to see this guide."
echo "Happy coding! üéâ"
