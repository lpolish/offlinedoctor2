name: "Continuous Integration"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  lint-and-test:
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Environment info
        run: |
          echo "üîç Environment Information:"
          echo "OS: ${{ runner.os }}"
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Rust version: $(rustc --version || echo 'Rust not yet installed')"
          echo "Working directory: $(pwd)"
          echo "Available disk space:"
          df -h . || echo "Could not check disk space"

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: |
          echo "üì¶ Installing frontend dependencies..."
          npm ci || {
            echo "‚ùå npm ci failed"
            echo "Trying npm install as fallback..."
            npm install || exit 1
          }
          echo "‚úÖ Frontend dependencies installed"

      - name: Frontend build and validation
        run: |
          echo "üî® Building frontend..."
          npm run build || {
            echo "‚ùå Frontend build failed"
            echo "Checking for common issues..."
            echo "Node version: $(node --version)"
            echo "NPM version: $(npm --version)"
            ls -la node_modules/ | head -10 || echo "No node_modules found"
            exit 1
          }
          echo "‚úÖ Frontend build successful"

      - name: Tauri compilation check
        run: |
          cd src-tauri
          echo "üîç Running Tauri compilation check..."
          echo "Rust version: $(rustc --version)"
          echo "Cargo version: $(cargo --version)"
          
          cargo fmt --check || {
            echo "‚ùå Cargo fmt issues found"
            echo "Run 'cargo fmt' to fix formatting"
          }
          
          cargo clippy -- -D warnings || {
            echo "‚ùå Clippy warnings found"
            echo "Fix the warnings above"
          }

          cargo check || {
            echo "‚ùå Cargo check failed"
            echo "Fix compilation errors above"
          }
          
          echo "üß™ Running Rust tests..."
          cargo test || {
            echo "‚ùå Rust tests failed"
            echo "Check test failures above"
          }
          echo "‚úÖ Tauri validation complete"

      - name: Security audit
        run: |
          echo "üîí Running security audits..."
          
          echo "NPM audit..."
          npm audit --audit-level=high || {
            echo "‚ùå npm security issues found"
            echo "Run 'npm audit fix' to resolve"
          }
          
          echo "Cargo audit..."
          cd src-tauri
          cargo install cargo-audit --quiet || echo "Installing cargo-audit..."
          cargo audit || {
            echo "‚ùå Cargo security issues found"
            echo "Review and update dependencies"
          }
          echo "‚úÖ Security audit complete"

      - name: Check for medical disclaimer compliance
        run: |
          echo "üè• Checking medical disclaimer compliance..."
          if grep -r "medical.*disclaimer\|educational.*purpose\|consult.*healthcare" src/ src-tauri/ --ignore-case; then
            echo "‚úÖ Medical disclaimers found"
          else
            echo "‚ùå Medical disclaimers missing - required for medical AI application"
            exit 1
          fi

  # Check bundle size and performance
  bundle-analysis:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and analyze bundle
        run: |
          npm run build
          echo "üì¶ Analyzing bundle size..."
          du -sh dist/
          echo "‚úÖ Bundle analysis complete"

      - name: Check bundle size limits
        run: |
          BUNDLE_SIZE=$(du -s dist/ | cut -f1)
          MAX_SIZE=10240  # 10MB in KB
          if [ "$BUNDLE_SIZE" -gt "$MAX_SIZE" ]; then
            echo "‚ùå Bundle size ($BUNDLE_SIZE KB) exceeds limit ($MAX_SIZE KB)"
            exit 1
          else
            echo "‚úÖ Bundle size ($BUNDLE_SIZE KB) within limits"
          fi
