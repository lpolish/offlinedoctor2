name: "Continuous Integration"

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always

jobs:
  lint-and-test:
    runs-on: ubuntu-22.04
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: npm ci

      - name: Install Python dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest black flake8 mypy

      - name: Frontend linting
        run: |
          npm run build
          echo "✅ Frontend build successful"

      - name: Backend linting and testing
        run: |
          cd backend
          echo "🔍 Running Python linting..."
          python -m black --check . || echo "❌ Black formatting issues found"
          python -m flake8 . --max-line-length=100 --ignore=E203,W503 || echo "❌ Flake8 issues found"
          echo "🧪 Running Python tests..."
          python -m pytest --tb=short || echo "❌ Python tests failed"
          echo "✅ Backend validation complete"

      - name: Rust linting
        run: |
          cd src-tauri
          echo "🔍 Running Rust linting..."
          cargo fmt --check || echo "❌ Cargo fmt issues found"
          cargo clippy -- -D warnings || echo "❌ Clippy warnings found"
          echo "🧪 Running Rust tests..."
          cargo test || echo "❌ Rust tests failed"
          echo "✅ Rust validation complete"

      - name: Security audit
        run: |
          npm audit --audit-level=high || echo "❌ npm security issues found"
          cd src-tauri && cargo audit || echo "❌ Cargo security issues found"

      - name: Check for medical disclaimer compliance
        run: |
          echo "🏥 Checking medical disclaimer compliance..."
          if grep -r "medical.*disclaimer\|educational.*purpose\|consult.*healthcare" src/ backend/ --ignore-case; then
            echo "✅ Medical disclaimers found"
          else
            echo "❌ Medical disclaimers missing - required for medical AI application"
            exit 1
          fi

  # Check bundle size and performance
  bundle-analysis:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build and analyze bundle
        run: |
          npm run build
          echo "📦 Analyzing bundle size..."
          du -sh dist/
          echo "✅ Bundle analysis complete"

      - name: Check bundle size limits
        run: |
          BUNDLE_SIZE=$(du -s dist/ | cut -f1)
          MAX_SIZE=10240  # 10MB in KB
          if [ "$BUNDLE_SIZE" -gt "$MAX_SIZE" ]; then
            echo "❌ Bundle size ($BUNDLE_SIZE KB) exceeds limit ($MAX_SIZE KB)"
            exit 1
          else
            echo "✅ Bundle size ($BUNDLE_SIZE KB) within limits"
          fi
